; my functions
(defun order (x y)
  (cond
    ((numberp x)
      (if (numberp y)
        (if (= y x) (list x) 
	  (if (< x y) (append (list x) (list y))
	              (append (list y) (list x))
	  )
	)
	(append (list x) (list y))
      )
    )
    ((numberp y)
      (append (list x) (list y))
    )
    (t (append (list x) (list y) ))
  )
)

(defun combine-recursive (x y)
  (cond
    ((null x) nil)
    ((null y) nil)
    ((not (listp x)) nil)
    ((not (listp y)) nil)
    ((not (= (length x) (length y))) nil)
    (t (cons (order (car x) (car y)) (combine-recursive (cdr x) (cdr y))))
  )
)

(defun combine-mapcar (x y)
  (cond
    ((null x) nil)
    ((null y) nil)
    ((not (listp x)) nil)
    ((not (listp y)) nil)
    ((not (= (length x) (length y))) nil)
    (t (mapcar `order x y))
  )
)

(defun combine-iterative (x y)
  (cond
    ((null x) nil)
    ((null y) nil)
    ((not (listp x)) nil)
    ((not (listp y)) nil)
    ((not (= (length x) (length y))) nil)
    (t (do ( (x1 x (cdr x1)) (y1 y (cdr y1)) (lst nil) )
	   ((null x1) lst)
	   (setq lst (append lst (list (order (car x1) (car y1)))))
       )
    )
  )
)

(defun remove-if-recursive (f x)
  (cond
    ((null f) nil)
    ((null x) nil)
    (t (append (if (funcall f (car x)) nil (list (car x)))
	       (remove-if-recursive f (cdr x))
       )
    )
  )
)

(defun remove-if-mapcar (f x)
  (cond
    ((null f) nil)
    ((null x) nil)
    (t (apply #'append (mapcar #'(lambda (x1) (if (funcall f x1) nil (list x1))) x)))
  )
)